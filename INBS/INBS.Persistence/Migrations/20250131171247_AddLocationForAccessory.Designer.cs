// <auto-generated />
using System;
using INBS.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace INBS.Persistence.Migrations
{
    [DbContext(typeof(INBSDbContext))]
    [Migration("20250131171247_AddLocationForAccessory")]
    partial class AddLocationForAccessory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("INBS.Domain.Entities.Accessory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("INBS.Domain.Entities.AccessoryCustomNailDesign", b =>
                {
                    b.Property<Guid>("AccessoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomNailDesignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("AccessoryId", "CustomNailDesignId");

                    b.HasIndex("CustomNailDesignId");

                    b.ToTable("AccessoryCustomDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Artist", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("StoreID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ArtistAvailability", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AvailableDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistAvailabilities");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistAvailabilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomDesignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("Preferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TotalAmount")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ArtistAvailabilityId");

                    b.HasIndex("CustomComboId");

                    b.HasIndex("CustomDesignId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Cancellation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CategoryService", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CategoryServices");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomCombo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomCombos");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomDesign", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DesignID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSave")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DesignID");

                    b.ToTable("CustomDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomNailDesign", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomDesignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("bit");

                    b.Property<int>("NailPosition")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomDesignId");

                    b.ToTable("CustomNailDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomerPreference", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<string>("PreferenceType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId", "PreferenceId", "PreferenceType");

                    b.ToTable("CustomerPreferences");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Design", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<float>("TrendScore")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("INBS.Domain.Entities.DesignPreference", b =>
                {
                    b.Property<Guid>("DesignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<string>("PreferenceType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DesignId", "PreferenceId", "PreferenceType");

                    b.ToTable("DesignPreferences");
                });

            modelBuilder.Entity("INBS.Domain.Entities.DeviceToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.ToTable("DeviceTokens");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BookingId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("DesignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumerialOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesignId", "NumerialOrder");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("INBS.Domain.Entities.NailDesign", b =>
                {
                    b.Property<Guid>("DesignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NailPosition")
                        .HasColumnType("int");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesignId", "NailPosition", "IsLeft");

                    b.ToTable("NailDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NotifyAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Recommendation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Artists")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GenerateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecommendedDesigns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedTimeSlots")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ServiceCustomCombo", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumerialOrder")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "CustomComboId");

                    b.HasIndex("CustomComboId");

                    b.ToTable("ServiceCustomCombos");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ServiceTemplateCombo", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumerialOrder")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "TemplateComboId");

                    b.HasIndex("TemplateComboId");

                    b.ToTable("ServiceTemplateCombos");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Store", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdminId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("INBS.Domain.Entities.StoreDesign", b =>
                {
                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DesignId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreId", "DesignId");

                    b.HasIndex("DesignId");

                    b.ToTable("StoreDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.StoreService", b =>
                {
                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("StoreServices");
                });

            modelBuilder.Entity("INBS.Domain.Entities.TemplateCombo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TemplateCombos");
                });

            modelBuilder.Entity("INBS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("INBS.Domain.Entities.AccessoryCustomNailDesign", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Accessory", "Accessory")
                        .WithMany("AccessoryCustomNailDesigns")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.CustomNailDesign", "CustomNailDesign")
                        .WithMany("AccessoryCustomNailDesigns")
                        .HasForeignKey("CustomNailDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessory");

                    b.Navigation("CustomNailDesign");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Admin", b =>
                {
                    b.HasOne("INBS.Domain.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("INBS.Domain.Entities.Admin", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Artist", b =>
                {
                    b.HasOne("INBS.Domain.Entities.User", "User")
                        .WithOne("Artist")
                        .HasForeignKey("INBS.Domain.Entities.Artist", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.Store", "Store")
                        .WithMany("Artists")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ArtistAvailability", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Artist", "Artist")
                        .WithMany("ArtistAvailabilities")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Booking", b =>
                {
                    b.HasOne("INBS.Domain.Entities.ArtistAvailability", "ArtistAvailability")
                        .WithMany("Bookings")
                        .HasForeignKey("ArtistAvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.CustomCombo", "CustomCombo")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.CustomDesign", "CustomDesign")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtistAvailability");

                    b.Navigation("CustomCombo");

                    b.Navigation("CustomDesign");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Cancellation", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Booking", "Booking")
                        .WithOne("Cancellation")
                        .HasForeignKey("INBS.Domain.Entities.Cancellation", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CategoryService", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Service", "Service")
                        .WithMany("CategoryServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomCombo", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomCombos")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomDesign", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomDesigns")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.Design", "Design")
                        .WithMany("CustomDesigns")
                        .HasForeignKey("DesignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Design");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomNailDesign", b =>
                {
                    b.HasOne("INBS.Domain.Entities.CustomDesign", "CustomDesign")
                        .WithMany("CustomNailDesigns")
                        .HasForeignKey("CustomDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomDesign");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Customer", b =>
                {
                    b.HasOne("INBS.Domain.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("INBS.Domain.Entities.Customer", "ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomerPreference", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerPreferences")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("INBS.Domain.Entities.DesignPreference", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Design", "Design")
                        .WithMany("DesignPreferences")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("INBS.Domain.Entities.DeviceToken", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Customer", "Customer")
                        .WithMany("DeviceTokens")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Booking", "Booking")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Image", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Design", "Design")
                        .WithMany("Images")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("INBS.Domain.Entities.NailDesign", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Design", "Design")
                        .WithMany("NailDesigns")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("INBS.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Recommendation", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Customer", "Customer")
                        .WithMany("Recommendations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ServiceCustomCombo", b =>
                {
                    b.HasOne("INBS.Domain.Entities.CustomCombo", "CustomCombo")
                        .WithMany("ServiceCustomCombos")
                        .HasForeignKey("CustomComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.Service", "Service")
                        .WithMany("ServiceCustomCombos")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomCombo");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ServiceTemplateCombo", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Service", "Service")
                        .WithMany("ServiceTemplateCombos")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.TemplateCombo", "TemplateCombo")
                        .WithMany("ServiceTemplateCombos")
                        .HasForeignKey("TemplateComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("TemplateCombo");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Store", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Admin", "Admin")
                        .WithMany("Stores")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("INBS.Domain.Entities.StoreDesign", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Design", "Design")
                        .WithMany("StoreDesigns")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.Store", "Store")
                        .WithMany("StoreDesigns")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("INBS.Domain.Entities.StoreService", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Service", "Service")
                        .WithMany("StoreServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.Store", "Store")
                        .WithMany("StoreServices")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Accessory", b =>
                {
                    b.Navigation("AccessoryCustomNailDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Admin", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Artist", b =>
                {
                    b.Navigation("ArtistAvailabilities");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ArtistAvailability", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Cancellation");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomCombo", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceCustomCombos");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomDesign", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CustomNailDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.CustomNailDesign", b =>
                {
                    b.Navigation("AccessoryCustomNailDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomCombos");

                    b.Navigation("CustomDesigns");

                    b.Navigation("CustomerPreferences");

                    b.Navigation("DeviceTokens");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Design", b =>
                {
                    b.Navigation("CustomDesigns");

                    b.Navigation("DesignPreferences");

                    b.Navigation("Images");

                    b.Navigation("NailDesigns");

                    b.Navigation("StoreDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Service", b =>
                {
                    b.Navigation("CategoryServices");

                    b.Navigation("ServiceCustomCombos");

                    b.Navigation("ServiceTemplateCombos");

                    b.Navigation("StoreServices");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Store", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("StoreDesigns");

                    b.Navigation("StoreServices");
                });

            modelBuilder.Entity("INBS.Domain.Entities.TemplateCombo", b =>
                {
                    b.Navigation("ServiceTemplateCombos");
                });

            modelBuilder.Entity("INBS.Domain.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Artist");

                    b.Navigation("Customer");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
