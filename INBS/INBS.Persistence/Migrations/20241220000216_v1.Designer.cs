// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using INBS.Persistence.Data;

#nullable disable

namespace INBS.Domain
{
    [DbContext(typeof(INBSDbContext))]
    [Migration("20241220000216_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("INBS.Domain.Entities.AdminLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminLogs");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ArtistAvailability", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AvailableDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistAvailabilities");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DesignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("Preferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TotalAmount")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("DesignId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Cancellation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DesignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumerialOrder")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DesignId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("INBS.Domain.Entities.NailDesign", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TrendScore")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("NailDesigns");
                });

            modelBuilder.Entity("INBS.Domain.Entities.NailDesignOccasion", b =>
                {
                    b.Property<Guid>("OccasionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DesignId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OccasionId", "DesignId");

                    b.HasIndex("DesignId");

                    b.ToTable("NailDesignOccasions");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Occasion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Occasions");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Recommendation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Artists")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GenerateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecommendedDesigns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedTimeSlots")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("INBS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("INBS.Domain.Entities.UserBooking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArtist")
                        .HasColumnType("bit");

                    b.HasKey("BookingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBookings");
                });

            modelBuilder.Entity("INBS.Domain.Entities.UserWaitList", b =>
                {
                    b.Property<Guid>("WaitListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArtist")
                        .HasColumnType("bit");

                    b.HasKey("WaitListId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWaitLists");
                });

            modelBuilder.Entity("INBS.Domain.Entities.WaitList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("RequestedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("RequestedTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("WaitLists");
                });

            modelBuilder.Entity("INBS.Domain.Entities.AdminLog", b =>
                {
                    b.HasOne("INBS.Domain.Entities.User", "Admin")
                        .WithMany("AdminLogs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("INBS.Domain.Entities.ArtistAvailability", b =>
                {
                    b.HasOne("INBS.Domain.Entities.User", "Artist")
                        .WithMany("ArtistAvailabilities")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Booking", b =>
                {
                    b.HasOne("INBS.Domain.Entities.NailDesign", "Design")
                        .WithMany("Bookings")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Cancellation", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Booking", "Booking")
                        .WithOne("Cancellation")
                        .HasForeignKey("INBS.Domain.Entities.Cancellation", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Image", b =>
                {
                    b.HasOne("INBS.Domain.Entities.NailDesign", "Design")
                        .WithMany("Images")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("INBS.Domain.Entities.NailDesignOccasion", b =>
                {
                    b.HasOne("INBS.Domain.Entities.NailDesign", "Design")
                        .WithMany("NailDesignOccasions")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.Occasion", "Occasion")
                        .WithMany("NailDesignOccasions")
                        .HasForeignKey("OccasionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Occasion");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Recommendation", b =>
                {
                    b.HasOne("INBS.Domain.Entities.User", "Customer")
                        .WithMany("Recommendations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("INBS.Domain.Entities.UserBooking", b =>
                {
                    b.HasOne("INBS.Domain.Entities.Booking", "Booking")
                        .WithMany("UserBookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.User", "User")
                        .WithMany("UserBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("INBS.Domain.Entities.UserWaitList", b =>
                {
                    b.HasOne("INBS.Domain.Entities.User", "User")
                        .WithMany("UserWaitLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INBS.Domain.Entities.WaitList", "WaitList")
                        .WithMany("UserWaitLists")
                        .HasForeignKey("WaitListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WaitList");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Cancellation");

                    b.Navigation("UserBookings");
                });

            modelBuilder.Entity("INBS.Domain.Entities.NailDesign", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("NailDesignOccasions");
                });

            modelBuilder.Entity("INBS.Domain.Entities.Occasion", b =>
                {
                    b.Navigation("NailDesignOccasions");
                });

            modelBuilder.Entity("INBS.Domain.Entities.User", b =>
                {
                    b.Navigation("AdminLogs");

                    b.Navigation("ArtistAvailabilities");

                    b.Navigation("Recommendations");

                    b.Navigation("UserBookings");

                    b.Navigation("UserWaitLists");
                });

            modelBuilder.Entity("INBS.Domain.Entities.WaitList", b =>
                {
                    b.Navigation("UserWaitLists");
                });
#pragma warning restore 612, 618
        }
    }
}
